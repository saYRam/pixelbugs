<?xml version="1.0" ?>
<project 
	name="PixelBugs" 
	xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd">

	<description>
		Build script for PixelBugs.
	</description>

	<include buildfile="common.xml" />

	<target name="common.build">
		<nant>
			<buildfiles refid="buildfiles.all" />
		</nant>
	</target>

	<target name="common.compile-tests"
		description="Compile NUnit tests and copy App.config file to the output directory, if it exists.">

		<call target="common.compile-dll" />

		<!-- Check if there is a framework specific config file and use that -->
		<property name="app.config.src" value="${src.dir}/App-${framework::get-target-framework()}.config" />
		<if test="${file::exists(app.config.src)}">
			<copy 
				file="${app.config.src}"
				tofile="${build.dir}/${project::get-name()}.dll.config"
			/>

			<call target="common.configure-tests" />
			<property name="app.config.src.found" value="true" />
		</if>
		<!-- In case there was no framework specific config check if there is a framework neutral file and use that. -->
		<property name="app.config.src" value="${src.dir}/App.config" />
		<if test="${file::exists(app.config.src)}" unless="${property::exists('app.config.src.found')}">
			<copy 
				file="${app.config.src}"
				tofile="${build.dir}/${project::get-name()}.dll.config"
			/>

			<call target="common.configure-tests" />
		</if>

	</target>

	<target name="common.configure-tests"
		description="Configure tests for running NUnit tests.">

		<property name="app.config" value="${build.dir}/${project::get-name()}.dll.config" />

		<!-- make sure the config file is writable -->
		<attrib file="${app.config}" readonly="false" />
		
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/appSettings/add[@key='tests.src']/@value"
			value="${src.dir}"
			failonerror="false"
		/>
	</target>

 	<target name="common.compile-dll"
		description="Compile sources into a DLL">

		<if test="${build.msbuild}">
			<property name="msbuildlogger" value="" overwrite="false" unless="${property::exists('CCNetLabel')}" />
			<property name="msbuildlogger" value="/logger:ThoughtWorks.CruiseControl.MsBuild.XmlLogger" overwrite="false" if="${property::exists('CCNetLabel')}" />
			<property name="msbuild.defines" value="${string::replace(current.build.defines, ',', ';')}" />

			<exec program="${framework::get-framework-directory(framework::get-target-framework())}/MSBuild.exe" workingdir="${build.dir}">
				<arg file="${src.dir}/${project.vsproj}" />
				<arg value="/p:Configuration=${project.config}" />
				<arg value="/p:OutputPath=${build.dir}" />
				<arg value="/p:TreatWarningsAsErrors=${build.warnaserrors}" />
				<arg value='/p:DefineConstants="${msbuild.defines}"' />
				<arg value='/t:Rebuild' if="${build.rebuild}" />
				<arg value="/p:DocumentationFile=${build.dir}/${project::get-name()}.xml" />
				<arg value="/p:NoWarn=1591" unless="${build.warnmissingdocs}" />
				<arg line="/p:SignAssembly=${assembly.sign} /p:AssemblyOriginatorKeyFile=${key.file}" />
				<arg value="${msbuildlogger}" />
			</exec>
		</if>
		
		<if test="${not build.msbuild}">
			<property name="warnaserror" value="${build.warnaserrors}" />
			<csc
				target="library" 
				define="${current.build.defines}" 
				debug="${build.debug}" 
				optimize="${build.optimize}"
				warnaserror="${warnaserror}"
				output="${build.dir}/${project::get-name()}.dll" 
				doc="${build.dir}/${project::get-name()}.xml"
				rebuild="${build.rebuild}"
				unless="${build.msbuild}"
			>
				<nowarn>
					<warning number="1591" unless="${build.warnmissingdocs}" /> <!-- No XML comment for publicly visible member -->
				</nowarn>
				<sources refid="project.sources" />
				<references refid="project.references" />
				<resources refid="project.resources" />
				<arg line="${csc.keyfile}" if="${assembly.sign}" />
				<arg line="${csc.args}" />
			</csc>
      <echo message="Built DLL to: ${build.dir}/${project::get-name()}.dll"/>
		</if>
	</target>

 	<target name="common.compile-website">
		<property name="bin.dir" value="${src.dir}/bin" />
		<mkdir dir="${bin.dir}" />
		<delete file="${bin.dir}/${project::get-name()}.pdb" failonerror="false" /> <!-- To prevent 1.1 compiler from crashing when switching from a 2.0 build -->
		<property name="build.dir" value="${bin.dir}" />

		<call target="common.compile-dll" />
		<call target="common.copy-references" />
	</target>

 	<target name="common.copy-references">
		<foreach item="File" property="reference">
			<in>
				<items refid="project.references" />
			</in>
			<do>
				<copy file="${reference}" todir="${bin.dir}" overwrite="${build.rebuild}" />
			</do>
		</foreach>
	</target>

	<target name="common.compile-exe"
		description="Compile sources into a console executable">

		<csc
			target="exe"
			define="${current.build.defines}" 
			debug="${build.debug}"
			optimize="${build.optimize}"
			warnaserror="${build.warnaserrors}"
			output="${build.dir}/${project::get-name()}.exe" 
		>
			<nowarn>
				<warning number="1591" unless="${build.warnmissingdocs}" /> <!-- No XML comment for publicly visible member -->
			</nowarn>
			<sources refid="project.sources" />
			<references refid="project.references" />
			<resources refid="project.resources" />
			<arg line="${csc.keyfile}" if="${assembly.sign}" />
			<arg line="${csc.args}" />
		</csc>
	</target>

	<target name="common.set-assembly-attribute-values">
		<property overwrite="false" name="assembly.is-cls-compliant" value="false" />
		<property overwrite="false" name="assembly.is-com-visible" value="false" />
		<property overwrite="false" name="assembly.guid" value="" />
		<property overwrite="false" name="assembly.allow-partially-trusted-callers" value="false" />
		<property overwrite="false" name="assembly.description" value="" />
		<property overwrite="false" name="assembly.product" value="${project::get-name()}" />
		<property overwrite="false" name="assembly.company" value="${project.company}" />
		<property overwrite="false" name="assembly.title" value="${project::get-name()} for ${framework::get-description(framework::get-target-framework())}" />
		<property overwrite="false" name="assembly.version" value="${project.major}.${project.minor}.${project.build}.${svn.revision}" />
		<property overwrite="false" name="assembly.version.informational" value="${assembly.major}.${assembly.minor}.${assembly.build}.${svn.revision}" />
		<property overwrite="false" name="assembly.copyright" value="Andy Pike" />
		<property overwrite="false" name="assembly.keyfile" value="${key.file}" />
		<property overwrite="false" name="assembly.sign" value="${sign}" />
	</target>

	<target name="common.generate-assemblyinfo"
		depends="common.init common.set-assembly-attribute-values"
		description="Generate AssemblyInfo.cs using assembly.* properties."
	>
		<property name="assemblyinfo.cs" value="${path::combine(src.dir,'AssemblyInfo.cs')}" />
		<attrib file="${assemblyinfo.cs}" readonly="false" />
		<asminfo output="${assemblyinfo.cs}" language="CSharp">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.InteropServices" />
				<import namespace="System.Security" if="${assembly.allow-partially-trusted-callers}" />
			</imports>
			<attributes>
				<attribute type="CLSCompliantAttribute" value="${assembly.is-cls-compliant}" />
				<attribute type="ComVisibleAttribute" value="${assembly.is-com-visible}" />
				<attribute type="GuidAttribute" value="${assembly.guid}" if="${assembly.guid != ''}" />
				<attribute type="AssemblyTitleAttribute" value="${assembly.title}" />
				<attribute type="AssemblyDescriptionAttribute" value="${assembly.description}" />
				<attribute type="AssemblyCompanyAttribute" value="${assembly.company}" />
				<attribute type="AssemblyProductAttribute" value="${assembly.product}" />
				<attribute type="AssemblyCopyrightAttribute" value="${assembly.copyright}" />
				<attribute type="AssemblyVersionAttribute" value="${assembly.version}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyFileVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyDelaySignAttribute" value="false" />
				
				<!-- For some reason, NAnt doesn't detect that APTCA has a public no-argument constructor -->
				<attribute asis="true" type="AllowPartiallyTrustedCallersAttribute" if="${assembly.allow-partially-trusted-callers}" />
			</attributes>
		</asminfo>
		<if test="${assembly.sign and not (nant.settings.currentframework == 'net-2.0')}" >
			<echo append="true" file="${assemblyinfo.cs}">#if MONO</echo>
			<echo append="true" file="${assemblyinfo.cs}">[assembly: AssemblyKeyFileAttribute(@"${path::get-full-path(assembly.keyfile)}")]</echo>
			<echo append="true" file="${assemblyinfo.cs}">#endif</echo>
		</if>
	</target>
	
	<target name="common.assemblyinfo">
		<nant target="generate-assemblyinfo">
			<buildfiles refid="buildfiles.all" />
		</nant>
	</target>

  <target name="common.run-tests-with-coverage" description="Run Nunit tests with coverage.">
    <!--<if test="${teamcity}">-->
	  <property name="nunit-console-full" value="${path::get-full-path(root.dir)}tools\NUnit 2.4.7\bin\nunit-console.exe"/>
	  	  
	  <echo message="Running tests with coverage report" />
	  <echo message="NUnit path: ${nunit-console-full}" />
      <exec program="${root.dir}\tools\Ncover 1.5.8\ncover.console.exe" workingdir="${build.dir}">
        <arg value="&quot;${nunit-console-full}&quot; ${project::get-name()}.dll" />
        <arg value="&quot;/exclude:${common.testrunner.categoryexclusions}&quot;" unless="${common.testrunner.categoryexclusions==''}" />
        
        <arg value="//reg" />
        <arg value="//a &quot;PixelDragons.Commons;PixelDragons.PixelBugs.Core;PixelDragons.PixelBugs.Web;&quot;" />
        <arg value="//w &quot;${build.dir}&quot;" />
        <arg value="//x &quot;${testresults.dir}\coverage.xml&quot;" />
		<arg value="//l &quot;${testresults.dir}\coverage.log&quot;" />
		<arg value="//ea &quot;System.CodeDom.Compiler.GeneratedCodeAttribute&quot;" />
		  
      </exec>
    
      <exec program="${root.dir}\tools\NCoverExplorer\ncoverexplorer.console.exe" workingdir="${testresults.dir}">
        <arg value="&quot;${testresults.dir}/coverage.xml&quot;" />
        <arg value="/r:ModuleClassFunctionSummary" />
        <arg value="/p:PixelBugs" />
        <arg value="/q" />
        <arg value="/h" />
        <arg value="/so:2" />
        <arg value="/m:80" />
      </exec>
    <!--</if>-->
  </target>

	<target name="common.run-tests" description="Run NUnit tests">
		<if test="${common.testrunner.enabled}">
			<echo message="Running tests in '${project::get-name()}'" />
        
			<exec program="${root.dir}\tools\nunit 2.4.7\bin\nunit-console.exe" workingdir="${build.dir}" failonerror="${common.testrunner.failonerror}">
			  <arg value="${project::get-name()}.dll" />
			  <arg value="&quot;/xml:${testresults.dir}/${project::get-name()}.dll-results.xml&quot;" />
			  <arg value="&quot;/config:${build.dir}/${project::get-name()}.dll.config&quot;" />
			  <arg value="&quot;/exclude:${common.testrunner.categoryexclusions}&quot;" unless="${common.testrunner.categoryexclusions==''}" />
			  <arg value="/nologo" />
			</exec>

			<!--<style style="${src.dir}/bdd.xsl" 
				   in="${testresults.dir}/${project::get-name()}.dll-results.xml" 
				   out="${testresults.dir}/Specs.htm" />-->
		</if>
		<if test="${not common.testrunner.enabled}">
			<echo message="Tests are disabled for '${project::get-name()}'" />
		</if>
	</target>

	<target name="common.run-database-tests" depends="common.put-connection-settings-into-app-config common.run-tests common.remove-connection-settings-from-app-config" />

	<target name="common.put-connection-settings-into-app-config">
		<property name="app.config" value="${build.dir}/${project::get-name()}.dll.config" />

		<!-- make sure the config file is writable -->
		<attrib file="${app.config}" readonly="false" />

		<!-- 
			Tell nhibernate how to connect to the test database.
		-->
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.dialect']/@value"
			value="${nhibernate.dialect}" 
		/>
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.driver_class']/@value"
			value="${nhibernate.connection.driver_class}" 
		/>
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.connection_string']/@value"
			value="${nhibernate.connection.connection_string}" 
		/>
	</target>

	<target name="common.remove-connection-settings-from-app-config">
		<property name="app.config" value="${build.dir}/${project::get-name()}.dll.config" />

		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.connection_string']/@value"
			value="conn string here" 
		/>
	</target>

</project>
